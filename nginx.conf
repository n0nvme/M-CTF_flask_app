worker_processes 16;

user root root;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;
  gzip on;
  gzip_proxied any;
  gzip_types
	text/css
	text/plain
	text/javascript
	application/javascript
	application/json
	application/x-javascript
	application/xml
	application/xml+rss
	application/xhtml+xml
	application/x-font-ttf
	application/x-font-opentype
	application/vnd.ms-fontobject
	image/svg+xml
	image/x-icon
	application/rss+xml
	application/atom_xml;
  gzip_comp_level 6;
  gzip_http_version 1.0;
  gzip_vary on;
  gzip_buffers 16 16k;
  gzip_min_length 50;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  #server {
  #  # if no Host match, close the connection to prevent host spoofing
  #  listen 80 default_server;
  #  return 444;
  #}

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 4000;
    client_max_body_size 1G;

    # set the correct host(s) for your site
    server_name _;

    keepalive_timeout 5;

    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    # path for static files
    root /app/static;
    autoindex off;
    charset utf-8;
    server_tokens off;
    
    #location = / {
    #  # only redirect / to /index.html
    #  try_files $uri/index.html index.html;
    #}

    location /static {
      rewrite ^/static/(.*) /$1 break;
      add_header Cache-Control max-age=31557600;
      try_files $uri =404;
    }
    
    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
      #try_files @proxy_to_app =404;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #  root /app/static;
    #}
  }
}

